/**
 * @author Nicole Dahlquist & Peter Thomson
 * June 4, 2016
 * PROG3060 - NDPTAssn1
 * LeagueDAO.java
 * Retrieves persisted data from the LeagueDB Derby Database
 */
package persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;

import org.hibernate.Session;

/**
 * Retrieves persisted data from the LeagueDB Derby Database
 */
public class LeagueDAO {

	//Class scope variables
	private Session dbSession;
	
	/**
	 * Parameterized constructor for injection of connection
	 * @param conn connection to database
	 */
	public LeagueDAO(Session dbSession){
		this.dbSession = dbSession;
	}
	
	/**
	 * Helper method which populates an ArrayList<Game> from a resultset of 
	 * games obtained from a prepared statement query 
	 *  
	 * @param ps prepared statement query expected to retrieve games from the database
	 * @return ArrayList<Game>
	 * @throws SQLException
	 */
	private ArrayList<Game> getGames(PreparedStatement ps) throws SQLException{
		ArrayList<Game> games = new ArrayList<Game>();
			
		return games;
	}
	
	/**
	 * Retrieves a list of completed games for a particular team
	 * @param teamID id of team to retrieve completed games for
	 * @return ArrayList<Game> containing completed games for the specified team
	 * @throws SQLException
	 */
	public ArrayList<Game> getCompletedGames(String teamID) throws SQLException{
		
		return new ArrayList<Game>();
	}
	
	/**
	 * Retrieves a list of scheduled games for a particular team
	 * @param teamID id of team to retrieve scheduled games for
	 * @return ArrayList<Game> containing scheduled games for the specified team
	 * @throws SQLException
	 */
	public ArrayList<Game> getScheduledGames(String teamID) throws SQLException{
		
		return new ArrayList<Game>();
	}
	
	// player queries
	/**
	 * Retrieves a list of all players for a particular team
	 * @param teamID id of team to retrieve players for
	 * @return List<Player> containing all players on the team specified
	 * @throws SQLException
	 */
	public ArrayList<Player> getPlayers(String teamID) throws SQLException{
		ArrayList<Player> players = new ArrayList<Player>();
		
		return players;
	}
	
	// team queries
	/**
	 * Retrieves a list of all teams in the database
	 * @return ArrayList<Team> containing all teams
	 * @throws SQLException
	 */
	public ArrayList<Team> getTeams() throws SQLException {
		ArrayList<Team> teams = new ArrayList<Team>();
		
		return teams;
	}
	
	// standings queries
	/**
	 * Gets the total number of wins for a particular team
	 * @param teamID id of team to get number of wins for
	 * @return total number of wins
	 * @throws SQLException
	 */
	public int getWins(String teamID) throws SQLException{
		PreparedStatement ps = null;
		int wins =0;
		String query = "SELECT COUNT(*) FROM game g "
			+ "WHERE (home = ? AND homeScore > visitorScore) "
			+ "OR (visitor = ? AND visitorScore > homeScore) ";
		ps = conn.prepareStatement(query);
		ps.setString(1, teamID);
		ps.setString(2, teamID);
		ResultSet rs = ps.executeQuery();
		rs.next();
		wins = rs.getInt(1);
		return wins;
	}
	
	/**
	 * Gets the total number of losses for a particular team
	 * @param teamID id of team to get number of losses for
	 * @return total number of losses
	 * @throws SQLException
	 */
	public int getLosses(String teamID) throws SQLException{
		PreparedStatement ps = null;
		int losses = 0;
		String query = "SELECT COUNT(*) FROM game g "
			+ "WHERE (home = ? AND homeScore < visitorScore) "
			+ "OR (visitor = ? AND visitorScore < homeScore) ";
		ps = conn.prepareStatement(query);
		ps.setString(1, teamID);
		ps.setString(2, teamID);
		ResultSet rs = ps.executeQuery();
		rs.next();
		losses = rs.getInt(1);
		return losses;
	}
	
	/**
	 * Gets the total number of ties for a particular team
	 * @param teamID id of team to get number of ties for
	 * @return total number of ties
	 * @throws SQLException
	 */
	public int getTies(String teamID) throws SQLException{
		PreparedStatement ps = null;
		int ties = 0;
		String query = "SELECT COUNT(*) FROM game g "
			+ "WHERE (homeScore IS NOT NULL AND visitorScore IS NOT NULL) "
			+ "AND ((home = ? OR visitor = ?) AND homeScore = visitorScore) ";
		ps = conn.prepareStatement(query);
		ps.setString(1, teamID);
		ps.setString(2, teamID);
		ResultSet rs = ps.executeQuery();
		rs.next();
		ties = rs.getInt(1);
		return ties;
	}
}
