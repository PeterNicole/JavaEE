/**
 * @author Nicole Dahlquist & Peter Thomson
 * July 12, 2016
 * PROG3060 - Assn2
 * LeagueDAO.java
 * Retrieves persisted data from the LeagueDB Derby Database
 */
package persistence;

import java.util.ArrayList;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.TypedQuery;

/**
 * Retrieves persisted data from the LeagueDB Derby Database
 */
public class LeagueDAO {

	//Class scope variables
	
	private EntityManagerFactory emf;
	private EntityManager em;
	//Transaction tx;
	
	
	/**
	 * Parameterized constructor for injection of connection
	 * @param conn connection to database
	 */
	public LeagueDAO(EntityManagerFactory emf){
		this.emf = emf;
	}
	// games
	/**
	 * Retrieves all upcoming games
	 * @return ArrayList<Game> containing upcoming games for all teams
	 */
	public ArrayList<Game> getUpcomingGames(){
		ArrayList<Game> games = new ArrayList<Game>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		games = (ArrayList<Game>)em.createQuery("SELECT g FROM Game g "
				+ "WHERE homeScore IS NULL AND visitorScore IS NULL ",
				Game.class).getResultList();
		em.close();
		return games;
	}
	/**
	 * Retrieves a list of completed games for a particular team
	 * @param teamID id of team to retrieve completed games for
	 * @return ArrayList<Game> containing completed games for the specified team
	 */
	public ArrayList<Game> getCompletedGames(String teamID){
		ArrayList<Game> games = new ArrayList<Game>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		games = (ArrayList<Game>)em.createQuery("SELECT g FROM Game g "
			+ "WHERE homeScore IS NOT NULL AND visitorScore IS NOT NULL "
			+ "AND (g.home.teamId = :home OR g.visitor.teamId = :visitor)", 
			Game.class).setParameter("home", teamID).setParameter("visitor", teamID)
			.getResultList();
		em.close();
		return games;
	}
	
	/**
	 * Retrieves a list of scheduled games for a particular team
	 * @param teamID id of team to retrieve scheduled games for
	 * @return ArrayList<Game> containing scheduled games for the specified team
	 */
	public ArrayList<Game> getScheduledGames(String teamID){
		ArrayList<Game> games = new ArrayList<Game>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		games = (ArrayList<Game>)em.createQuery("SELECT g FROM Game g "
			+ "WHERE homeScore IS NULL AND visitorScore IS NULL "
			+ "AND (g.home.teamId = :home OR g.visitor.teamId = :visitor)",
			Game.class).setParameter("home", teamID)
			.setParameter("visitor", teamID)
			.getResultList();
		em.close();
		return games;
	}
	
	// player queries
	/**
	 * Retrieves a player
	 */
	public Roster getRoster(int rosterID)
	{
		Roster roster = new Roster();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		roster = (Roster)em.createQuery("SELECT r FROM Roster r "
			+ "WHERE rosterId = :rosterID")
			.setParameter("rosterID", rosterID).getSingleResult();	
		em.close();
		return roster;
	}
	/**
	 * Retrieves a list of all players for a particular team
	 * @param teamID id of team to retrieve players for
	 * @return List<Player> containing all players on the team specified
	 */
	public ArrayList<Roster> getRosters(String teamID, String ... position ){
		ArrayList<Roster> rosters = new ArrayList<Roster>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		String positions = "(";
		for (int i = 0; i < position.length; i++)
		{
			if(i == position.length -1)
			{
				positions += "r.position = :position" + i + ")";
			}
			else
			{
				positions += "r.position = :position" + i + " OR ";
			}
		}
		TypedQuery<Roster> query = em.createQuery(
			"SELECT r FROM Roster r WHERE r.team.teamId = :teamID "
			+ "AND " + positions
			+ "ORDER BY r.jersey", Roster.class)
				.setParameter("teamID", teamID);
			for(int j = 0; j < position.length; j++)
			{
				query.setParameter("position" + j, position[j]);
			}
			rosters = (ArrayList<Roster>) query.getResultList();
			
		em.close();
		return rosters;
	}
	
	// team queries
	/**
	 * Retrieves a specific team
	 */
	public Team getTeam(String teamId)
	{
		Team team = new Team();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		team = (Team)em.createQuery("SELECT t FROM Team t "
				+ "WHERE teamId = :teamId AND t.league = 'NHL'")
			.setParameter("teamId", teamId).getSingleResult();	
		em.close();
		return team;
	}
	/**
	 * Retrieves a list of all teams in the database
	 * @return ArrayList<Team> containing all teams
	 */
	public ArrayList<Team> getTeams() {
		ArrayList<Team> teams = new ArrayList<Team>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		teams = (ArrayList<Team>)em.createQuery("SELECT t FROM Team t "
			+ "WHERE t.league = 'NHL'", Team.class)
			.getResultList();
		em.close();
		return teams;
	}
	// arena queries
	/**
	 * Get the arenas
	 */
	public ArrayList<Arena> getArenas()
	{
		ArrayList<Arena> arenas = new ArrayList<Arena>();
		em = emf.createEntityManager();
		em.getTransaction().begin();
		arenas = (ArrayList<Arena>)em.createQuery("SELECT a FROM Arena",
			Arena.class).getResultList();
		em.close();
		return arenas;
	}
	
	// standings queries
	/**
	 * Gets the total number of wins for a particular team
	 * @param teamID id of team to get number of wins for
	 * @return total number of wins
	 */
	public int getWins(String teamID){
		
		return 0;
	}
	
	/**
	 * Gets the total number of losses for a particular team
	 * @param teamID id of team to get number of losses for
	 * @return total number of losses
	 */
	public int getLosses(String teamID){
		
		return 0;
	}
	
	/**
	 * Gets the total number of ties for a particular team
	 * @param teamID id of team to get number of ties for
	 * @return total number of ties
	 */
	public int getTies(String teamID){
		
		return 0;
	}
}
